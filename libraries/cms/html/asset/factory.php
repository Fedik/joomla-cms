<?php
/**
 * @package     Joomla.Libraries
 * @subpackage  HTML
 *
 * @copyright   Copyright (C) 2005 - 2015 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

defined('JPATH_PLATFORM') or die;

jimport('joomla.filesystem.path');
jimport('joomla.filesystem.file');
jimport('joomla.filesystem.folder');

/**
 * Asset factory class.
 */
class JHtmlAssetFactory
{
	/**
	 * Files with assets infos. File path should be relative
	 * @var array as filePath => (bool) isNew
	 *
	 * @example of data file:
{
	"title" : "Example",
	"name"  : "com_example",
	"author": "Joomla! CMS",
	"assets": [
		{
			"name": "library1",
			"version": "3.5.0",
			"js": [
				"com_example/library1.min.js"
			]
		},
		{
			"name": "library2",
			"version": "3.5.0",
			"js": [
				"com_example/library2.min.js"
			],
			"css": [
				"com_example/library2.css"
			],
			"dependency": [
				"core",
				"library1"
			]
		},

	]
}
	 *
	 */
	protected $dataFiles = array();

	/**
	 * Class constructor
	 */
	public function __construct()
	{
		$this->searchForDataFiles();
	}

	/**
	 * Register new file with asset info
	 * @param  string  $path  Relative path
	 * @return void
	 * @throws UnexpectedValueException If file does not exists
	 */
	public function registerDataFile($path)
	{
		$path = JPath::clean($path);
		if (!is_file(JPATH_ROOT . '/' . $path))
		{
			throw new UnexpectedValueException('Asset data file do not available');
		}

		if(!isset($this->dataFiles[$path]))
		{
			$this->dataFiles[$path] = true;
		}
	}

	/**
	 * Search for joomla.asset.json filse in the Media folder
	 * @return void
	 */
	protected function searchForDataFiles()
	{
		$pathBase = JPATH_ROOT . '/media';
		$files = JFolder::files($pathBase, '^joomla\.asset\.json$', true, true);
		if (empty($files))
		{
			return;
		}

		foreach($files as $file) {
			$path = preg_replace('#^' . JPATH_ROOT . '/#', '', $file);
			$this->registerDataFile($path);
		}
	}

	/**
	 * Parse registered data files
	 * @return void
	 */
	public function parseDataFiles()
	{
		// Filter new asset data files and parse each
		foreach(array_keys(array_filter($this->dataFiles)) as $path) {
			$this->parseDataFile($path);

			// Mark as parsed (not new)
			$this->dataFiles[$path] = false;
		}
	}

	/**
	 * Parse data file
	 * @return void
	 * @throws RuntimeException If file is empty or invalid
	 */
	protected function parseDataFile($path)
	{
		$data = json_decode(@file_get_contents(JPATH_ROOT . '/' . $path), true);

		if (!$data)
		{
			throw new RuntimeException('Asset data file is incorrect or broken');
		}

		// Asset exists but empty, skip it silently
		if(empty($data['assets']))
		{
			return;
		}

		var_dump($data);
	}

	/**
	 * Helper method to build the asset.json data from files in the media folder
	 *
	 * @param string $pathBase Relative path to Folder for scan for files
	 * @param string $prefix   Media folder prefix
	 * @param string $title
	 * @param string $author
	 *
	 * @return string JSON data
	 */
	public function buildDataFileContent($pathBase, $prefix = null, $title = '', $author = 'Joomla! CMS')
	{
		$title  = $title ? $title : 'Autogenerated assets collection';
		$assets = array();
		$prefix   = $prefix === null ? preg_replace('#^media\/#', '', $pathBase) : $prefix;
		$pathBase = JPath::clean(JPATH_ROOT . '/' . trim($pathBase, '/'));

		// Search for JavaScript files
		$js = JFolder::files($pathBase, '\.js$', true, true);
		if (!empty($js))
		{
			foreach($js as $file){
				// Remove base path
				$relative = preg_replace('#^' . $pathBase . '/#', '', $file);

				// Remove "js/"
				$parts = explode('/', $relative);
				$sIndex = count($parts) - 2;

				if(!empty($parts[$sIndex]) && $parts[$sIndex] === 'js')
				{
					unset($parts[$sIndex]);
				}

				$relative = implode('/', $parts);
				$name     = preg_replace(array('#-uncompressed\.js$#', '#\.min\.js$#', '#\.js$#'), '', $relative);

				if(empty($assets[$name]))
				{
					$assets[$name] = array(
						'name' => $name,
						'version' => '1.0',
						'js'  => array(),
						'css' => array(),
						'dependency' => array(),
					);
				}
				$assets[$name]['js'][$name] = $prefix . '/' . $relative;
			}
		}

		// Search for StyleSheet files
		$css = JFolder::files($pathBase, '\.css$', true, true);
		if (!empty($css))
		{
			foreach($css as $file){
				// Remove base path
				$relative = preg_replace('#^' . $pathBase . '/#', '', $file);

				// Remove "css/"
				$parts = explode('/', $relative);
				$sIndex = count($parts) - 2;

				if(!empty($parts[$sIndex]) && $parts[$sIndex] === 'css')
				{
					unset($parts[$sIndex]);
				}

				$relative = implode('/', $parts);
				$name     = preg_replace(array('#\.min\.css$#', '#\.css$#'), '', $relative);

				if(empty($assets[$name]))
				{
					$assets[$name] = array(
						'name' => $name,
						'version' => '1.0',
						'js'  => array(),
						'css' => array(),
						'dependency' => array(),
					);
				}
				$assets[$name]['css'][$name] = $prefix . '/' . $relative;
			}
		}

		// Remove asset "keys", and empty valuse
		foreach($assets as $name => $asset) {
			if (empty($asset['js']))
			{
				unset($assets[$name]['js']);
			}
			else
			{
				$assets[$name]['js'] = array_values($asset['js']);
			}

			if(empty($asset['css']))
			{
				unset($assets[$name]['css']);
			}
			else
			{
				$assets[$name]['css'] = array_values($asset['css']);
			}
		}

		// Prepare base
		$data = array(
			'title'  => $title,
			'author' => $author,
			'assets' => array_values($assets),
		);

		return json_encode($data, JSON_PRETTY_PRINT);
	}
}
